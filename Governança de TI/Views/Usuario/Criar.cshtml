@* Removemos o @model - o modelo virá via AJAX ou será criado no JavaScript *@
@{
    // Removemos o ViewData["Title"]
    // Layout = null; // Partial views não têm layout por padrão
}

@* Adicionamos um ID ao formulário para o JavaScript poder encontrá-lo *@
<form id="formCriarUsuario" asp-action="Criar" enctype="multipart/form-data" method="post">
    @Html.AntiForgeryToken()
    @* Usamos asp-validation-summary="All" para mostrar erros de modelo e do servidor aqui *@
    <div asp-validation-summary="All" class="text-danger mb-3"></div>

    <div class="mb-3">
        <label for="Nome" class="form-label">Nome</label>
        <input name="Nome" id="Nome" class="form-control" required />
        <span data-valmsg-for="Nome" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label for="Email" class="form-label">Email</label>
        <input name="Email" id="Email" type="email" class="form-control" required />
        <span data-valmsg-for="Email" class="text-danger"></span>
    </div>

    <!-- Campo Departamento -->
    <div class="mb-3">
        <label for="DepartamentoId" class="form-label">Departamento</label>
        <div class="input-group">
            @* O ViewBag será carregado via JavaScript na View principal (Index) *@
            <select name="DepartamentoId" id="DepartamentoIdModal" class="form-select">
                <option value="">Carregando...</option> @* Placeholder *@
            </select>
            <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#modalGerenciarDepartamentosModal">
                <i class="bi bi-plus-lg"></i>
            </button>
        </div>
        <span data-valmsg-for="DepartamentoId" class="text-danger"></span>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label for="Perfil" class="form-label">Perfil</label>
            <select name="Perfil" id="Perfil" class="form-select" required>
                <option value="">Selecione um perfil...</option>
                <option value="Admin">Administrador/TI</option>
                <option value="Usuario">Utilizador Comum</option>
            </select>
            <span data-valmsg-for="Perfil" class="text-danger"></span>
        </div>

        <div class="col-md-6 mb-3">
            <label for="Status" class="form-label">Status</label>
            <select name="Status" id="Status" class="form-select" required>
                <option value="Ativo">Ativo</option>
                <option value="Inativo">Inativo</option>
            </select>
            <span data-valmsg-for="Status" class="text-danger"></span>
        </div>
    </div>

    <!-- Foto de Perfil -->
    <div class="mb-4 text-center">
        <label class="form-label d-block">Foto de Perfil</label>
        <img id="previewImagemModal" src="~/img/default-user.png"
             class="rounded-circle shadow-sm mb-2"
             style="width:100px;height:100px;object-fit:cover;border:1px solid #ccc;" />
        <input type="file" name="Imagem" id="inputImagemModal"
               class="form-control mt-2" accept="image/*" />
    </div>

    <div class="alert alert-info small mt-3" role="alert">
        Uma senha aleatória será gerada e enviada para o e-mail do utilizador.
    </div>

    <!-- Os botões "Cancelar" e "Salvar" serão adicionados ao modal na View principal -->

</form>

<!-- Modal de Gerenciar Departamentos (precisa de ID único se usado em modais) -->
<div class="modal fade" id="modalGerenciarDepartamentosModal" tabindex="-1" aria-labelledby="modalDepartamentosLabelModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalDepartamentosLabelModal">Gerenciar Departamentos</h5>
                @* Alterado data-bs-dismiss para apontar para o modal principal se necessário, ou manter assim *@
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h6>Adicionar Novo Departamento</h6>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" id="novoDepartamentoNomeModal" placeholder="Nome do novo departamento...">
                    <button type="button" class="btn btn-primary" id="btnSalvarNovoDepartamentoModal" style="background-color: #8A2BE2; border-color: #8A2BE2;">Salvar</button>
                </div>
                <hr>
                <h6>Departamentos Existentes</h6>
                <ul id="listaDepartamentosExistentesModal" class="list-group">
                    <li class="list-group-item">Carregando...</li>
                </ul>
            </div>
            <div class="modal-footer">
                @* Alterado data-bs-dismiss para apontar para o modal principal se necessário, ou manter assim *@
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
            </div>
        </div>
    </div>
</div>

@* Adicionamos o script aqui mesmo, pois ele pertence a este formulário parcial *@
<script>
    // --- LÓGICA DE PREVIEW DA IMAGEM ---
    const imageUploadInputModal = document.getElementById('inputImagemModal');
    const imagePreviewModal = document.getElementById('previewImagemModal');
    if (imageUploadInputModal && imagePreviewModal) {
        imageUploadInputModal.addEventListener('change', function (event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    imagePreviewModal.src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        });
    }

    // --- LÓGICA DO MODAL DE DEPARTAMENTOS (adaptada para IDs únicos) ---
    const modalElModal = document.getElementById('modalGerenciarDepartamentosModal');
    if (modalElModal) {
        const btnSalvarNovoDepartamentoModal = document.getElementById('btnSalvarNovoDepartamentoModal');
        const novoDepartamentoNomeInputModal = document.getElementById('novoDepartamentoNomeModal');
        const departamentoSelectModal = document.getElementById('DepartamentoIdModal'); // Campo select principal
        const listaDepartamentosExistentesModal = document.getElementById('listaDepartamentosExistentesModal');
        const modalGerenciarDepartamentosModal = new bootstrap.Modal(modalElModal);

        // Carregar ao abrir
        modalElModal.addEventListener('show.bs.modal', fetchDepartamentosModal);

        function fetchDepartamentosModal() {
             fetch('/api/departamento')
                .then(res => res.ok ? res.json() : Promise.reject('Erro ao buscar departamentos'))
                .then(departamentos => {
                    listaDepartamentosExistentesModal.innerHTML = ''; // Limpa lista
                    departamentoSelectModal.innerHTML = '<option value="">Selecione...</option>'; // Limpa select principal e adiciona opção padrão
                    if (!departamentos.length) {
                        listaDepartamentosExistentesModal.innerHTML = '<li class="list-group-item">Nenhum cadastrado.</li>';
                    } else {
                        departamentos.forEach(dpto => {
                            listaDepartamentosExistentesModal.appendChild(criarItemListaDepartamentoModal(dpto));
                            // Popula o select principal também
                            const option = new Option(dpto.nome, dpto.id);
                            departamentoSelectModal.add(option);
                        });
                    }
                })
                .catch(err => {
                    console.error(err);
                    listaDepartamentosExistentesModal.innerHTML = '<li class="list-group-item text-danger">Erro ao carregar.</li>';
                    departamentoSelectModal.innerHTML = '<option value="">Erro ao carregar</option>';
                });
        }
         // Recarrega a lista do select principal quando o modal interno é fechado
        modalElModal.addEventListener('hidden.bs.modal', function () {
            // Chama a função fetch que popula o select principal da partial view
            // (se a função estiver global, senão precisa adaptar)
             fetch('/api/departamento')
                .then(res => res.ok ? res.json() : Promise.reject('Erro ao buscar departamentos'))
                .then(departamentos => {
                    departamentoSelectModal.innerHTML = '<option value="">Selecione...</option>'; // Limpa e adiciona opção padrão
                    departamentos.forEach(dpto => {
                        const option = new Option(dpto.nome, dpto.id);
                        departamentoSelectModal.add(option);
                    });
                });
        });

        function criarItemListaDepartamentoModal(dpto) { /* ... (igual ao anterior, mas com IDs Modal) ... */
             const li = document.createElement('li');
            li.className = 'list-group-item d-flex justify-content-between align-items-center';
            li.textContent = dpto.nome;
            li.dataset.id = dpto.id;
            const btnDelete = document.createElement('button');
            btnDelete.type = 'button';
            btnDelete.className = 'btn-close';
            btnDelete.setAttribute('aria-label', 'Excluir');
            li.appendChild(btnDelete);
            return li;
        }

        // Salvar novo
        btnSalvarNovoDepartamentoModal.addEventListener('click', function () { /* ... (igual ao anterior, mas com IDs Modal e atualiza select Modal) ... */
            const nomeNovoDepartamento = novoDepartamentoNomeInputModal.value.trim();
            if (!nomeNovoDepartamento) return;
            // Desabilita botão para evitar cliques duplos
            btnSalvarNovoDepartamentoModal.disabled = true;

            fetch('/api/departamento', { /* ... */
                 method: 'POST',
                headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value }, // Adiciona token
                body: JSON.stringify({ nome: nomeNovoDepartamento })
            })
            .then(res => res.ok ? res.json() : res.text().then(text => Promise.reject(text || 'Erro')))
            .then(novoDpto => {
                listaDepartamentosExistentesModal.appendChild(criarItemListaDepartamentoModal(novoDpto));
                const option = new Option(novoDpto.nome, novoDpto.id, false, false); // Não seleciona por padrão
                departamentoSelectModal.add(option); // Adiciona ao select principal
                // modalGerenciarDepartamentosModal.hide(); // Não fecha automaticamente, permite adicionar mais
                novoDepartamentoNomeInputModal.value = '';
            })
            .catch(err => alert(`Erro ao salvar: ${err}`))
            .finally(() => {
                btnSalvarNovoDepartamentoModal.disabled = false; // Reabilita o botão
            });
        });


        // Excluir
        listaDepartamentosExistentesModal.addEventListener('click', function (e) { /* ... (igual ao anterior, mas com IDs Modal e atualiza select Modal) ... */
             if (!e.target.classList.contains('btn-close')) return;
            const li = e.target.closest('li');
            const dptoId = li.dataset.id;
            const dptoNome = li.textContent.trim();
            if (!confirm(`Deseja excluir o departamento "${dptoNome}"?`)) return;

             fetch(`/api/departamento/${dptoId}`, {
                  method: 'DELETE',
                  headers: {'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value } // Adiciona token
                  })
                .then(res => {
                    if (!res.ok) return res.text().then(text => Promise.reject(text || 'Erro'));
                    li.remove();
                    Array.from(departamentoSelectModal.options).forEach(opt => { // Remove do select principal
                        if (opt.value == dptoId) opt.remove();
                    });
                     // Verifica se a lista ficou vazia
                    if (listaDepartamentosExistentesModal.children.length === 0) {
                        listaDepartamentosExistentesModal.innerHTML = '<li class="list-group-item">Nenhum cadastrado.</li>';
                    }
                })
                .catch(err => alert(`Erro ao excluir: ${err}`));
        });
    }

    // Adiciona validação do lado do cliente ao formulário (se jQuery Unobtrusive Validation estiver incluído)
    var form = $("#formCriarUsuario");
    if (form.length && $.validator && $.validator.unobtrusive) {
        form.removeData("validator");
        form.removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse(form);
    }

</script>
